version: '3.6'
services:
  # Homer
  # Dashboard for smart-home services
  homer:
    container_name: homer
    image: b4bz/homer
    restart: unless-stopped
    env_file:
      - .env
    volumes:
      - ./homer:/www/assets
    ports:
      - 8888:8080

  # Cloudflare Tunnel
  # Secured and easier option for exposing my smart home services to Internet
  cloudflared:
    container_name: cloudflared
    image: cloudflare/cloudflared
    restart: unless-stopped
    env_file:
      - .env
    command: tunnel run

  # Nginx
  # A proxy-server for some services (joins Bitwarden's WS and HTTP together)
  nginx:
    container_name: nginx
    image: nginx
    restart: unless-stopped
    env_file:
      - .env
    volumes:
      - ./nginx:/etc/nginx/templates
    ports:
      - 8080:80

  # Portainer CE
  # Managing containers via nice web UI
  portainer-ce:
    container_name: portainer
    image: portainer/portainer-ce
    restart: unless-stopped
    ports:
      - 8000:8000 # Agent
      - 9000:9000 # Web UI
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - .docker/portainer-ce/data:/data

  # Watchtower
  # A solution for automating Docker container base image updates
  watchtower:
    container_name: watchtower
    image: containrrr/watchtower
    restart: unless-stopped
    env_file:
      - .env
    environment:
      WATCHTOWER_CLEANUP: 'true'
      WATCHTOWER_WARN_ON_HEAD_FAILURE: 'never'
      WATCHTOWER_NO_STARTUP_MESSAGE: 'true'
      WATCHTOWER_SCHEDULE: '0 0 5 * * 6'
      WATCHTOWER_NOTIFICATIONS: email
      WATCHTOWER_NOTIFICATION_EMAIL_FROM: ${EMAIL_SERVER_ADDRESS}
      WATCHTOWER_NOTIFICATION_EMAIL_TO: ${EMAIL_SERVER_ADDRESS}
      WATCHTOWER_NOTIFICATION_EMAIL_SERVER: ${EMAIL_SERVER}
      WATCHTOWER_NOTIFICATION_EMAIL_SERVER_PORT: ${EMAIL_SERVER_PORT}
      WATCHTOWER_NOTIFICATION_EMAIL_SERVER_USER: ${EMAIL_SERVER_USER}
      WATCHTOWER_NOTIFICATION_EMAIL_SERVER_PASSWORD: ${EMAIL_SERVER_PASSWORD}
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock

  # Home Assistant
  # The core of my smart-home automations
  home-assistant:
    container_name: home-assistant
    image: ghcr.io/home-assistant/home-assistant:stable
    volumes:
      - ./home-assistant:/config
      - ${MEDIA_VOLUME}:/media
      - /etc/localtime:/etc/localtime:ro
      - /run/dbus:/run/dbus:ro
    env_file:
      - .env
    restart: unless-stopped
    privileged: true
    network_mode: host
    labels:
      com.centurylinklabs.watchtower.monitor-only: true

  # MQTT
  # A Mosquitto broker for my devices communicating via MQTT
  mosquitto:
    container_name: mosquitto
    image: eclipse-mosquitto:latest
    restart: unless-stopped
    ports:
      - 1888:1888 # default 1883 doesn't work
      - 9001:9001
    volumes:
      - .docker/mosquitto/data:/mosquitto/data
      - .docker/mosquitto/log:/mosquitto/log
      - ./mosquitto/mosquitto.conf:/mosquitto/config/mosquitto.conf
    labels:
      com.centurylinklabs.watchtower.monitor-only: true

  # Zigbee2MQTT
  # A bridge for zigbee devices to be able to communicate via MQTT
  zigbee2mqtt:
    container_name: zigbee2mqtt
    image: koenkk/zigbee2mqtt
    restart: unless-stopped
    env_file:
      - .env
    volumes:
      - /run/udev:/run/udev:ro
      - ./zigbee2mqtt:/app/data
    devices:
      - /dev/ttyUSB0
    privileged: true
    network_mode: host
    labels:
      com.centurylinklabs.watchtower.monitor-only: true

  # ESPHome
  # A system to control ESP8266/ESP32 devices
  esphome:
    container_name: esphome
    image: esphome/esphome
    restart: unless-stopped
    env_file:
      - .env
    command: >
      dashboard --username ${ESPHOME_USERNAME} --password ${ESPHOME_PASSWORD} /config
    volumes:
      - ./esphome:/config:rw
      - /etc/localtime:/etc/localtime:ro
    network_mode: host

  # Duplicati
  # Simple and flexible UI for backing up stuff
  duplicati:
    container_name: duplicati
    image: lscr.io/linuxserver/duplicati:latest
    env_file:
      - .env
    volumes:
      - .docker/duplicati/config:/config #Config Files
      - ${BACKUPS_VOLUME}:/backups
      - .:/source
    ports:
      - 8200:8200
    restart: unless-stopped

  # AirConnect
  # Make AirPlay available for Chromecast devices
  airconnect:
    container_name: airconnect
    image: 1activegeek/airconnect
    restart: unless-stopped
    network_mode: host

  # Samba
  # Remote access to the file system
  samba:
    container_name: samba
    image: dperson/samba
    volumes:
      - .:/mnt/smart-home
      - ${MEDIA_VOLUME}:/mnt/media
    environment:
      USERID: ${PUID}
      GROUPID: ${PGID}
    ports:
      - 139:139
      - 445:445
      - 137:137/udp
      - 138:138/udp
    command: >
      samba.sh
        -s "smart-home;/mnt/smart-home;yes;no;no;all"
        -s "media;/mnt/media;yes;no;no;all"
        -u ${SAMBA_USER};${SAMBA_PASSWORD}
    restart: unless-stopped

  # pihole:
  #   container_name: pihole
  #   image: pihole/pihole:latest
  #   hostname: smart-home.local
  #   ports:
  #     - '53:53/tcp' # DNS
  #     - '53:53/udp' # DNS
  #     - '67:67/udp' # DHCP
  #     - '5300:80/tcp' # WEB UI
  #   env_file:
  #     - .env
  #   environment:
  #     WEBPASSWORD: ${PIHOLE_WEBPASSWORD}
  #     VIRTUAL_HOST: ${PIHOLE_VIRTUAL_HOST}
  #   volumes:
  #     - .docker/pihole/etc-pihole:/etc/pihole
  #     - .docker/pihole/etc-dnsmasq.d:/etc/dnsmasq.d
  #   cap_add:
  #     - NET_ADMIN
  #   restart: unless-stopped
  #   labels:
  #     com.centurylinklabs.watchtower.monitor-only: true

  # Plex
  # Personal media server with movies and tv-series
  plex:
    image: lscr.io/linuxserver/plex:latest
    container_name: plex
    network_mode: host
    env_file:
      - .env
    environment:
      VERSION: docker
    volumes:
      - .docker/plex/config:/config
      - ${PLEX_LIBRARY}:/config/Library
      - ${MEDIA_VOLUME}:/media
    restart: unless-stopped

  # Transmission
  # A torrent client for downloading media
  transmission:
    container_name: transmission
    image: lscr.io/linuxserver/transmission:latest
    restart: unless-stopped
    env_file:
      - .env
    environment:
      USER: ${TRANSMISSION_USER}
      PASS: ${TRANSMISSION_PASSWORD}
      TRANSMISSION_WEB_HOME: /web
    ports:
      - 9091:9091
      - 51413:51413
      - 51413:51413/udp
    volumes:
      - .docker/transmission/config:/config
      - .docker/transmission/web:/web
      - ${MEDIA_VOLUME}/downloads:/downloads

  # Sonarr
  # A TV series manager for grabing, sorting and organizing new series
  sonarr:
    container_name: sonarr
    image: lscr.io/linuxserver/sonarr:develop # v4
    restart: unless-stopped
    env_file:
      - .env
    volumes:
      - .docker/sonarr:/config
      - ${MEDIA_VOLUME}:/media # TODO: Add link to docs
    ports:
      - 8989:8989

  # Radarr
  # A movie collection manager for grabing and downloading movies
  radarr:
    image: lscr.io/linuxserver/radarr:latest
    container_name: radarr
    restart: unless-stopped
    env_file:
      - .env
    volumes:
      - .docker/radarr:/config
      - ${MEDIA_VOLUME}:/media # TODO: Add link https://wiki.servarr.com/docker-guide#consistent-and-well-planned-paths
    ports:
      - 7878:7878

  # Prowlarr
  # TODO:
  prowlarr:
    container_name: prowlarr
    image: lscr.io/linuxserver/prowlarr:latest
    restart: unless-stopped
    env_file:
      - .env
    volumes:
      - .docker/prowlarr:/config
    ports:
      - 9696:9696

  # Bitwarden
  # Vaultwarden is a Rust implementation of Bitwarden API for less powerful devices
  bitwarden:
    container_name: bitwarden
    image: vaultwarden/server
    restart: unless-stopped
    env_file:
      - .env
    environment:
      WEBSOCKET_ENABLED: 'true'
    ports:
      - 3880:80
      - 3812:3012
    volumes:
      - .docker/bitwarden:/data

  # PS5
  ps5mqtt:
    container_name: ps5mqtt
    image: ghcr.io/funkeyflo/ps5-mqtt/aarch64:latest
    restart: unless-stopped
    entrypoint: /config/run.sh
    volumes:
      - ./ps5:/config
    network_mode: host
    environment:
      MQTT_HOST: 192.168.50.113
      MQTT_PORT: 1888
      MQTT_USERNAME: ${MQTT_USER}
      MQTT_PASSWORD: ${MQTT_PASSWORD}
      FRONTEND_PORT: 8645
      DEBUG: '@ha:ps5:*'
      PSN_ACCOUNTS: '[]'
      CREDENTIAL_STORAGE_PATH: /config/credentials.json
