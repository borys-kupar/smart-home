#!/usr/bin/env bash

COMMAND="$1"
shift 1
COMMAND_ARGS=("${@}")

#
# UTILS
#

function smart-home:utils:validate() {
  if [ "$(type -t smart-home:command:"$COMMAND")" = function ]; then
    return 0
  elif [ -z "$COMMAND" ]; then
    smart-home:command:help
    return 1
  else
    echo "Unknown command: $COMMAND";
    return 1
  fi
}

function smart-home:exists() {
  command -v "$1" > /dev/null 2>&1
}

function smart-home::load_vars() {
  # shellcheck disable=SC2046
  export $(grep -v '^#' "$1" | xargs);
}

#
# COMMANDS
#

function smart-home:command:help() {
  echo "
  🏡 Denys Dovhan Smart Home

  smart-home help                       print this help message
  smart-home init                       install dependencies
  smart-home start                      start all services
  smart-home stop                       stop all services
  smart-home down                       stop and remove all containers
  smart-home restart                    restart all services
  smart-home update                     stop, update and restart all services
  smart-home prune                      delete obsolete containers
  smart-home password                   generate a password
  smart-home add-mosquitto-user         add mosquitto user
  smart-home adguard-resolved           fix AdGuard and systemd-resolved conflict
  smart-home setup-network              setup network settings
"
}

function smart-home:command:init() {
  # Update packages
  sudo apt-get update
  sudo apt-get upgrade

  # Install docker
  if ! smart-home:exists docker; then
    echo "Installing docker..."
    curl -fsSL https://get.docker.com | sh
    sudo usermod -G docker -a "$USER"
  fi

  if ! smart-home:exists docker-compose; then
    echo "Installing docker-compose..."
    sudo apt install -y docker-compose
  fi

  if ! smart-home:exists mosquitto_passwd; then
    echo "Installing mosquitto..."
    sudo apt-get install -y mosquitto
  fi

  echo "Installing additional packages..."
  sudo apt-get install -y git cockpit avahi-daemon network-manager python3-pip nodejs

  echo "Installing python dependencies..."
  pip3 install -r "$SMART_HOME_DIR/requirements.txt"
  
  echo "Addint pre-commit hooks..."
  pre-commit install

  if [ ! -f "$SMART_HOME_DIR/.env" ]; then
    echo "Creating .env file..."
    cp "$SMART_HOME_DIR/.env.example" "$SMART_HOME_DIR/.env"
  fi
  
  if [ ! -d "$SMART_HOME_DIR/.backups" ]; then
    echo "Creating .backups directory..."
    mkdir -p "$SMART_HOME_DIR/.backups"
  fi

  echo "Done!"
  echo "Please, reboot!"
}

function smart-home:command:start() {
  echo "Starting containers..."
  docker-compose up -d
}

function smart-home:command:stop() {
  echo "Stopping containers..."
  docker-compose stop
}

function smart-home:command:down() {
  echo "Stopping and removing containers..."
  docker-compose down --remove-orphans
}

function smart-home:command:restart() {
  echo "Restarting containers..."
  docker-compose restart
}

function smart-home:command:update() {
  echo "Pulling latest images..."
  docker-compose pull
  echo "Building images..."
  docker-compose build
  echo "Starting containers..."
  docker-compose up -d
  echo "Prune to free up space..."
  docker system prune --volumes -f
}

function smart-home:command:prune() {
  echo "Deletting all images not associated with a container..."
  docker system prune --volumes
}

function smart-home:command:password() {
  local password length
  length=${1:-16}
  password="$(openssl rand -base64 $length | rev | cut -b 2- | rev)";

  echo "$password"
}

function smart-home:command:docs() {
  mkdocs serve --livereload --dev-addr localhost:7000
}

function smart-home:command:add-mosquitto-user() {
  local user password userdb

  user="${COMMAND_ARGS[0]}"
  password="$(smart-home:command:password 16)";
  userdb="$SMART_HOME_DIR/.docker/mosquitto/data/users.db"

  if [ -z "$user" ]; then
    echo "Please provide a username."
    return 1;
  fi

  mkdir -p "$(dirname $userdb)"
  touch "$userdb"
  mosquitto_passwd -b "$userdb" "$user" "$password";

  if [ $? -eq 0 ]; then
    echo "Username: $user";
    echo "Password: $password";
    return 0
  fi

  return 1
}

function smart-home:command:adguard-resolved() {
  local config
  config="/etc/systemd/resolved.conf.d/adguardhome.conf"

  sudo mkdir -p "$(dirname $config)"

  if [ -f "$config" ]; then
    sudo rm "$config" 
  fi

  sudo touch "$config"

  sudo tee "$config" > /dev/null << EOF
[Resolve]
DNS=127.0.0.1
DNSStubListener=no
EOF

  sudo mv /etc/resolv.conf /etc/resolv.conf.backup
  sudo ln -s /run/systemd/resolve/resolv.conf /etc/resolv.conf

  systemctl reload-or-restart systemd-resolved
}

function smart-home:command:setup-network() {
  # Based on:
  # https://gist.github.com/dbkinghorn/ed923bbcb7ec3f53bd2da5fe5e9b49b2
  
  echo "Changing netplan to network manager on all interfaces"
  
  # backup existing yaml file
  cd /etc/netplan || exit
  sudo cp 50-cloud-init.yaml 50-cloud-init.yaml.bak

  sudo tee /etc/netplan/50-cloud-init.yaml > /dev/null << EOF
# This file describes the network interfaces available on your system
# For more information, see netplan(5).
network:
  renderer: NetworkManager
  ethernets:
    eth0:
      dhcp4: false
      addresses:
        - 192.168.50.113/24
      gateway4: 192.168.50.1
      nameservers:
        addresses: [8.8.8.8, 1.1.1.1]
  version: 2
EOF

  # setup netplan for network manager
  sudo netplan generate
  sudo netplan apply
  
  # make sure network manager is running
  systemctl enable NetworkManager.service
  systemctl restart NetworkManager.service

  echo "Done!"
}

#
# MAIN
#

function main() {
  if [ -z "$SMART_HOME_DIR" ]; then
    echo "\$SMART_HOME_DIR is unset";
    return 1;
  fi;

  cd "$SMART_HOME_DIR" || exit 1

  if ! smart-home:utils:validate; then
    return 1
  fi

  smart-home::load_vars "$SMART_HOME_DIR/.env"

  smart-home:command:"$COMMAND" "${COMMAND_ARGS[*]}"

  return $?
}

main
