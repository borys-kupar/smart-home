#!/usr/bin/env bash

COMMAND="$1"
shift 1
COMMAND_ARGS=("${@}")

#
# UTILS
#

function smart-home:utils:validate() {
  if [ "$(type -t smart-home:command:"$COMMAND")" = function ]; then
    return 0
  elif [ -z "$COMMAND" ]; then
    smart-home:command:help
    return 1
  else
    echo "Unknown command: $COMMAND";
    return 1
  fi
}

function smart-home:exists() {
  command -v "$1" > /dev/null 2>&1
}

function smart-home::load_vars() {
  # shellcheck disable=SC2046
  export $(grep -v '^#' "$1" | xargs);
}

#
# COMMANDS
#

function smart-home:command:help() {
  echo "
  üè° Denys Dovhan Smart Home

  smart-home help                       print this help message
  smart-home init                       install dependencies
  smart-home start                      start all services
  smart-home stop                       stop all services
  smart-home down                       stop and remove all containers
  smart-home restart                    restart all services
  smart-home update                     stop, update and restart all services
  smart-home prune                      delete obsolete containers
  smart-home add-mosquitto-user         add mosquitto user
"
}

function smart-home:command:init() {
  # Install docker
  if ! smart-home:exists docker; then
    echo "Installing docker..."
    curl -fsSL https://get.docker.com | sh
    sudo usermod -G docker -a "$USER"
  fi

  if ! smart-home:exists docker-compose; then
    echo "Installing docker-compose..."
    sudo apt install -y docker-compose
  fi

  if ! smart-home:exists mosquitto_passwd; then
    echo "Installing mosquitto..."
    sudo apt-get install -y mosquitto
  fi

  if ! smart-home:exists git; then
    echo "Installing git..."
    sudo apt-get install -y git
  fi

  if ! smart-home:exists rclone; then
    echo "Installing rclone..."
    curl https://rclone.org/install.sh | sudo bash
  fi

  echo "Done!"
  echo "Please, reboot!"
}

function smart-home:command:start() {
  echo "Starting containers..."
  docker-compose up -d
}

function smart-home:command:stop() {
  echo "Stopping containers..."
  docker-compose stop
}

function smart-home:command:down() {
  echo "Stopping and removing containers..."
  docker-compose down --remove-orphans
}

function smart-home:command:restart() {
  echo "Restarting containers..."
  docker-compose restart
}

function smart-home:command:update() {
  echo "Stopping containers..."
  docker-compose down --remove-orphans
  echo "Pulling latest images..."
  docker-compose pull
  echo "Building images..."
  docker-compose build
  echo "Starting containers..."
  docker-compose up -d
  echo "Consider running prune-images to free up space..."
}

function smart-home:command:prune() {
  echo "Deletting all images not associated with a container..."
  docker image prune -a
}

function smart-home:command:add-mosquitto-user() {
  local user password userdb

  user="${COMMAND_ARGS[0]}"
  password="$(openssl rand -base64 32 | rev | cut -b 2- | rev)";
  userdb="$SMART_HOME_DIR/.docker/mosquitto/data/users.db"

  if [ -z "$user" ]; then
    echo "Please provide a username."
    return 1;
  fi

  touch "$userdb"
  mosquitto_passwd -b "$userdb" "$user" "$password";

  if [ $? -eq 0 ]; then
    echo "Username: $user";
    echo "Password: $password";
    return 0
  fi

  return 1
}

function smart-home:command:backup() {
  local timestamp backup_file backup_dir plex_dir

  timestamp=$(date +"%Y-%m-%d_%H%M%S");
  backup_dir="$SMART_HOME_DIR/.backups";
  backup_file="$backup_dir/backup_$timestamp.tar.gz";
  plex_dir='.docker/plex/config/Library/Application Support/Plex Media Server'

  mkdir -p "$backup_dir"

  echo "Compressing everything into $backup_file..."

  tar \
    --exclude="./.backups" \
    --exclude="./media" \
    --exclude="*.log" \
    --exclude="$plex_dir/Metadata" \
    --exclude="$plex_dir/Cache" \
    --exclude="$plex_dir/Media" \
    -czvf "$backup_file" .

  echo "Compressed! File size: $(du -h $backup_file)"

  echo "Removing old backups..."
  find "$backup_dir" -mtime +14 -type f -delete;

  echo "Syncing to Google Drive..."
  rclone sync --progress --exclude ".DS_Store" "$backup_dir" googledrive:"Smart Home"
}

#
# MAIN
#

function main() {
  if [ -z "$SMART_HOME_DIR" ]; then
    echo "\$SMART_HOME_DIR is unset";
    return 1;
  fi;

  cd "$SMART_HOME_DIR" || exit 1

  if ! smart-home:utils:validate; then
    return 1
  fi

  smart-home::load_vars "$SMART_HOME_DIR/.env"

  smart-home:command:"$COMMAND" "${COMMAND_ARGS[*]}"

  return $?
}

main
