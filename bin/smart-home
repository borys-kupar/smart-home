#!/usr/bin/env bash

COMMAND="$1"
shift 1
COMMAND_ARGS=("${@}")

#
# UTILS
#

function smart-home:utils:validate() {
  if [ "$(type -t smart-home:command:"$COMMAND")" = function ]; then
    return 0
  elif [ -z "$COMMAND" ]; then
    smart-home:command:help
    return 1
  else
    echo "Unknown command: $COMMAND";
    return 1
  fi
}

function smart-home:exists() {
  command -v "$1" > /dev/null 2>&1
}

function smart-home::load_vars() {
  # shellcheck disable=SC2046
  export $(grep -v '^#' "$1" | xargs);
}

#
# COMMANDS
#

function smart-home:command:help() {
  echo "
  üè° Denys Dovhan Smart Home

  smart-home help                       print this help message
  smart-home init                       install dependencies
  smart-home start                      start all services
  smart-home stop                       stop all services
  smart-home down                       stop and remove all containers
  smart-home restart                    restart all services
  smart-home update                     stop, update and restart all services
  smart-home prune                      delete obsolete containers
  smart-home password                   generate a password
"
}

function smart-home:command:init() {
  # Update packages
  sudo apt-get update
  sudo apt-get upgrade

  echo "Installing python dependencies..."
  pip3 install -r "$SMART_HOME_DIR/requirements.txt"
  
  echo "Addint pre-commit hooks..."
  pre-commit install

  echo "Done!"
  echo "Please, reboot!"
}

function smart-home:command:start() {
  echo "Starting containers..."
  docker-compose up -d
}

function smart-home:command:stop() {
  echo "Stopping containers..."
  docker-compose stop
}

function smart-home:command:down() {
  echo "Stopping and removing containers..."
  docker-compose down --remove-orphans
}

function smart-home:command:restart() {
  echo "Restarting containers..."
  docker-compose restart
}

function smart-home:command:update() {
  echo "Pulling latest images..."
  docker-compose pull
  echo "Building images..."
  docker-compose build
  echo "Starting containers..."
  docker-compose up -d
  echo "Prune to free up space..."
  docker system prune --volumes -f
}

function smart-home:command:prune() {
  echo "Deletting all images not associated with a container..."
  docker system prune --volumes
}

function smart-home:command:password() {
  local password length
  length=${1:-16}
  password="$(openssl rand -base64 $length | rev | cut -b 2- | rev)";

  echo "$password"
}

function smart-home:command:docs() {
  mkdocs serve --livereload --dev-addr localhost:7000
}

#
# MAIN
#

function main() {
  if [ -z "$SMART_HOME_DIR" ]; then
    echo "\$SMART_HOME_DIR is unset";
    return 1;
  fi;

  cd "$SMART_HOME_DIR" || exit 1

  if ! smart-home:utils:validate; then
    return 1
  fi

  smart-home::load_vars "$SMART_HOME_DIR/.env"

  smart-home:command:"$COMMAND" "${COMMAND_ARGS[*]}"

  return $?
}

main
